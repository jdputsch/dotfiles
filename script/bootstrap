#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find "$DOTFILES_ROOT/" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_pyenv () {
    # Serious hack... if /usr/sepp directory exists, assume we're on a
    # system that is shared across multiple linux flavors, else 
    # just install to ~/.pyenv

    info installing pyenv
    
    if [ -d /usr/sepp ]; then
        . ${DOTFILES_ROOT}/zsh/identify_platform
        PYENV_ROOT=${HOME}/.pyenv-${DistroBasedOn}-${MAJOR_REV}
    else
        PYENV_ROOT=${HOME}/.pyenv
    fi
    if [ ! -d ${PYENV_ROOT} ]; then
        git clone https://github.com/pyenv/pyenv.git ${PYENV_ROOT}
        git clone https://github.com/pyenv/pyenv-virtualenv.git \
            ${PYENV_ROOT}/plugins/pyenv-virtualenv
        git clone https://github.com/pyenv/pyenv-update.git \
            ${PYENV_ROOT}/plugins/pyenv-update
    fi
}

install_wsl_links () {
    local overwrite_all=false backup_all=false skip_all=false
    mkdir -p ${HOME}/Archive
    mkdir -p ${HOME}/src
    mkdir -p /mnt/c/Users/jeff.putsch/bin
    mkdir -p /mnt/c/Users/jeff.putsch/log
    mkdir -p ${HOME}/.config/sublime-text-3/Packages
    mkdir -p ${HOME}/.dotfiles/sublime/packages
    link_file "/mnt/c/Users/jeff.putsch/.autohotkey" ${HOME}/.autohotkey
    link_file "/mnt/c/Users/jeff.putsch/.dbeaver4" ${HOME}/.dbeaver4
    link_file "/mnt/c/Users/jeff.putsch" ${HOME}/win
    link_file "/mnt/c/Users/jeff.putsch/bin" ${HOME}/bin
    link_file "/mnt/c/Users/jeff.putsch/log" ${HOME}/log
    link_file "/mnt/c/Users/jeff.putsch/Desktop" ${HOME}/Desktop
    link_file "/mnt/c/Users/jeff.putsch/Downloads" ${HOME}/Downloads
    link_file "/mnt/c/Users/jeff.putsch/OneDrive - maximintegrated.onmicrosoft.com" ${HOME}/OneDrive
    link_file "/mnt/c/Users/jeff.putsch/OneDrive - maximintegrated.onmicrosoft.com" ${HOME}/Archive/Work
    link_file "${HOME}/OneDrive/src/Maxim" ${HOME}/src/Maxim
    link_file ${HOME}/Desktop/tmp ${HOME}/tmp
    link_file "${HOME}/win/OneDrive - maximintegrated.onmicrosoft.com/dotfiles/sublime/packages/User" ${HOME}/.dotfiles/sublime/packages/User
    link_file "${HOME}/win/OneDrive - maximintegrated.onmicrosoft.com/dotfiles/sublime/packages/User" ${HOME}/.config/sublime-text-3/Packages/User
}
 
# setup_gitconfig
install_dotfiles

#
# install oh-my-zsh
#
export ZSH=${HOME}/.oh-my-zsh
if [ ! -d ${ZSH} ]; then
  REPO=jdputsch/ohmyzsh \
  CHSH=no \
  RUNZSH=no \
  KEEP_ZSHRC=yes \
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/jdputsch/ohmyzsh/master/tools/install.sh)"
fi
# install custom/personal configs/parts of oh-my-zsh:
# (
#   cd $ZSH/custom
#   git init .
#   git fetch --tags --force https://github.com/jdputsch/ohmyzsh-custom.git "+refs/heads/*:refs/remotes/origin/*"
#   git config remote.origin.url https://github.com/jdputsch/ohmyzsh-custom.git
#   git config --add remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
#   git checkout main
# )


### When we're on WSL (Windows Subsystem for Linux), we need
### to put some funky symlinks in place to "move" commonly used
### directories into places that are shared with windows.
if [[ "$(uname -a)" == *Microsoft* ]]; then
    install_wsl_links
fi


echo ''
echo '  All installed!'
