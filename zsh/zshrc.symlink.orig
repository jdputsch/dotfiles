#
# Sets dotzsh options.
#
# Authors:
#   Jeff Putsch <jdputsch@gmail.com>
#
# Inspired by:
#   oh-my-zsh -- I don't need/want all that complexity and capability
#   Julien Voisin' .zshrc:
#        https://dustri.org/b/my-zsh-configuration.html#my-zshrc
#

# Which plugins would you like to load?
# Standard plugins can be found in $DOTZSH/plugins/
# Custom plugins may be added to $DOTZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(vyper-env)

#
# Terminal is dumb, shut off a bunch of stuff, likely TRAMP mode
# for Emacs
#
if [[ "$TERM" == "dumb" ]]; then
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    unfunction precmd
    unfunction preexec
    PS1='$ '
    return
fi

#
# WSL does not implement nice(2), therefore we turn of BG_NICE
#
if [[ "${KERNEL}" == *Microsoft* ]]; then
    unsetopt BG_NICE
fi

# Load the functions from any autoloadable function directories
__() {
    # Extended globbing is needed for listing the autoloadable function 
    # directories.
    setopt LOCAL_OPTIONS EXTENDED_GLOB

    # Add functions to fpath
    fpath=(${DOTFILES}/*/functions/(/FN) ${fpath})
    
    # Load the functions
    for dzfunction in \
        ${DOTFILES}/*/functions/^([_.]*|README*)(.N:t); do
        autoload -Uz "${dzfunction}"
    done
} && __


is_plugin() {
  local base_dir=$1
  local name=$2
  builtin test -f $base_dir/plugins/$name/$name.plugin.zsh \
    || builtin test -f $base_dir/plugins/$name/_$name
}

# Add all defined plugins to fpath. This must be done
# before running compinit.
for plugin ($plugins); do
  if is_plugin "$DOTZSH_CUSTOM" "$plugin"; then
    fpath=("$DOTZSH_CUSTOM/plugins/$plugin" $fpath)
  elif is_plugin "$DOTZSH" "$plugin"; then
    fpath=("$DOTZSH/plugins/$plugin" $fpath)
  else
    echo "[oh-my-zsh] plugin '$plugin' not found"
  fi
done

# Load the env.zsh files
for dzenvfile in ${DOTFILES}/*/env.zsh; do
    if [[ -s "${dzenvfile}" ]]; then
        source "${dzenvfile}"
    fi
done

autoload -U colors zsh-mime-setup select-word-style
colors          # colors
zsh-mime-setup  # run everything as if it's an executable
select-word-style bash # ctrl+w on words

#
# Prompt
#
setopt PROMPT_SUBST     # allow funky stuff in prompt
color="blue"
if [ "$USER" = "root" ]; then
    color="red"         # root is red, user is blue
fi;
prompt="%{$fg[$color]%}%n%{$reset_color%}@%U%{$fg[yellow]%}%m%{$reset_color%}%u %% "
# RPROMPT='${vim_mode} ${vcs_info_msg_0_}'

#
# Key bindings
#
# Lookup in /etc/termcap or /etc/terminfo else, you can get the right keycode
# by typing ^v and then type the key or key combination you want to use.
# "man zshzle" for the list of available actions
bindkey -e       # emacs keybindings
# Uncomment the following two lines to get regex history searching
# bindkey '^R' history-incremental-pattern-search-backward
# bindkey '^R' history-incremental-pattern-search-forward

#
# Completion
#
autoload -U compinit
compinit
zmodload -i zsh/complist        
setopt hash_list_all            # hash everything before completion
setopt completealiases          # complete alisases
setopt always_to_end            # when completing from the middle of a word, move the cursor to the end of the word    
setopt complete_in_word         # allow completion from within a word/phrase
setopt correct                  # spelling correction for commands
setopt list_ambiguous           # complete as much of a completion until it gets ambiguous.

zstyle ':completion::complete:*' use-cache on               # completion caching, use rehash to clear
zstyle ':completion:*' cache-path ~/.zsh/cache              # cache path
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'   # ignore case
zstyle ':completion:*' menu select=2                        # menu if nb items > 2
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}       # colorz !
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate # list of completers to use

# sections completion !
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format $'\e[00;34m%d'
zstyle ':completion:*:messages' format $'\e[00;31m%d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:manuals' separate-sections true

zstyle ':completion:*:processes' command 'ps -au$USER'
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always
zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=29=34"


zstyle ':completion:*:*:killall:*' menu yes select
zstyle ':completion:*:killall:*' force-list always
users=(jeff root)           # because I don't care about others
zstyle ':completion:*' users $users

#
# Pushd
#
setopt pushd_ignore_dups
setopt pushd_silent             # no dir stack after pushd or popd

#
# History
#
HISTFILE=~/.zsh_history		# where to store zsh history
HISTSIZE=1024			# big history
SAVEHIST=1024			# big history [TODO: check if save size should
                                #   be different]
setopt append_history           # append
setopt hist_ignore_all_dups     # no duplicate
unsetopt hist_ignore_space      # ignore space prefixed commands
setopt hist_reduce_blanks       # trim blanks
setopt hist_verify              # show before executing history commands
setopt inc_append_history       # add commands as they are typed, don't wait 
                                #   until shell exit 
setopt share_history            # share hist between sessions
setopt bang_hist                # !keyword

#
# Python (pyenv) default behavior
#
# enable-pyenv

# Local Variables:
# mode: sh
# eval: (sh-set-shell "zsh")
# End:

export COLUMNS="120"

export PATH="$PATH:/home/jputsch/apps/acli/10.2.0/linux/7"
