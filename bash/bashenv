#
# Defines environment variables.
#
# Authors:
#   Jeff Putsch <jdputsch@gmail.com>
#

# Helper functions for managing paths
pathappend() {
  local path_var=$1 ; shift
  for ARG in "$@"
  do
    if [ -d "$ARG" ] && [[ ":${!path_var}:" != *":$ARG:"* ]]; then
        printf -v "${path_var}" '%s' "${!path_var:+${!path_var}:}$ARG"
    fi
  done
}

pathprepend() {
  local path_var=$1 ; shift
  for ((i=$#; i>0; i--));
  do
    ARG=${!i}
    if [ -d "$ARG" ] && [[ ":${!path_var}:" != *":$ARG:"* ]]; then
      printf -v "${path_var}" '%s' "${ARG}${!path_var:+:${!path_var}}"
    fi
  done
}

# Basic X11 environment settings
export XENVIRONMENT=${HOME}/.Xdefaults

# Set platform specific variables
PLAT=""
if [ -z "${DistroBasedOn}" ] && [ -f ${DOTFILES}/scripts/identify_platform.sh ]; then
    . ${DOTFILES}/scripts/identify_platform.sh
    PLAT=${DistroBasedOn}-${MAJOR_REV}-${MACH}
fi


# Setup XDG environment variables
export XDG_CONFIG_HOME="$HOME"/.config
export XDG_DATA_HOME="$HOME"/.local/share
export XDG_CACHE_HOME="$HOME"/.cache

# Setup Rust CARGO and RUSTUP locations
export CARGO_HOME="$XDG_DATA_HOME"/cargo
export RUSTUP_HOME="$XDG_DATA_HOME"/rustup

# Setup Go locations
export GOPATH="$XDG_DATA_HOME"/go

# Places we may need to set the SHELL environment variable
if [[ ${OS} = linux ]]; then
    if [[ "$(</proc/version)" = *Microsoft* ]]; then
        export SHELL=/usr/bin/bash
    elif [[ -z "${SHELL}" ]]; then
        export SHELL=$(readlink /proc/$$/exe)
    fi
fi

## Do not use Apple specific shell sessions
SHELL_SESSIONS_DISABLE=1

# If modules is available, use it, else manage key paths here
if [ -f /usr/cadtools/bin/modules.dir/Shrc ]; then
    if shopt -q login_shell; then
      . /usr/cadtools/bin/modules.dir/Shrc
    fi
else
    # Set the the list of directories that cd searches.
    export CDPATH=""

    # Set the list of directories that `info` searches for manuals.
    export INFOPATH
    pathprepend INFOPATH /usr/local/share/info /usr/share/info
    
    # OSX has a path helper (/usr/libexec/path_helper) to set PATH and MANPATH
    # variables, normally I would use it, but I use APFs on Mac, therefore I don't
    # use path helper anymore: on APFS, the order of files read from /etc/paths.d
    # is not ascii/numeric anymore. therfore, we'll emulate it here.
        
    # Set the list of directories that bash searches for programs.
    if [[ $OSTYPE = darwin* ]] && [ -x /usr/libexec/path_helper ]; then
    	eval `/usr/libexec/path_helper -s`
    else
      # Set the list of directories that man searches for manuals.
      if [[ $OSTYPE != darwin* ]]; then
        export MANPATH
        pathprepend MANPATH /usr/local/share/man /usr/share/man
        for path_file in $(ls /etc/manpaths.d/* | sort); do
          pathappend MANPATH $(<$path_file)
        done
      fi
      # Now set path entries
      pathprepend PATH /usr/local/{bin,sbin} /usr/{bin,sbin} /{bin,sbin} ~/bin
      for path_file in $(ls /etc/paths.d/* | sort); do
        pathappend PATH $(<$path_file)
      done
    fi
    
    # Add personal, custom paths
    for path_file in $(ls ${HOME}/.paths.d/* | sort); do
      [ -e $HOME/BASH_DEBUG ] && echo ".bashenv: settings paths from $path_file" >> $HOME/BASH_DEBUG
      pathappend PATH $(<$path_file)
    done
    unset path_file
    
    # Move some path elements to the beginning of our search path
    if [ -n "${PLAT}" ] && [ -d ${HOME}/${PLAT}/bin ]; then
        PATH=$(echo $PATH | tr : \\012 | grep -v ^${HOME}/${PLAT}/bin | tr \\012 :)
        pathprepend PATH ${HOME}/${PLAT}/bin
    fi
    
    # Remove path elements that start with "/tmp/" -- a Maxim/Linux artifact:
    PATH=$(echo $PATH | tr : \\012 | grep -v ^/tmp/ | tr \\012 :)


    # MacOSX
    if [[ "$OSTYPE" = darwin*  && -d /opt/pkg ]]; then
      pathappend INFOPATH /opt/pkg/info
    fi
    
    # Linux
    if [[ "$OSTYPE" = linux* ]]; then
        pathappend MANPATH /usr/sepp/man /home/tekcad/local/man
    fi
fi

# Language
if [[ -z "$LANG" ]]; then
  def_locale=$(locale -a | egrep 'en.*US.*UTF-8')
  if [[ -n "$def_locale" ]]; then
    export LANG=$def_locale
  else
    export LANG=C
  fi
fi

## Set P4 environment variables based on the platform & host
if [[ ${OS} = "darwin" ]] && [[ $HOST = JPUTSCH-MX01* ]]; then
    export P4CONFIG=.p4config
    export P4PORT=sjp4edge1.adsiv.analog.com:1666
    export P4USER=jputsch

    if [ -x /Applications/p4merge.app/Contents/MacOS/p4merge ]; then
        p4merge() {
            /Applications/p4merge.app/Contents/MacOS/p4merge "$@"
        }
    fi
fi

## PIP behavior, for python
# require virtualenv for using pip
export PIP_REQUIRE_VIRTUALENV=true

# # Browser (Default)
# if [[ "$OSTYPE" == darwin* ]]; then
#   export BROWSER='open'
# fi

# local Variables:
# mode: sh
# eval: (sh-set-shell "bash")
# End:
