# Get the location of this dotfile collection
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink,
                                                 # we need to resolve it relative to the
                                                 # path where the symlink file was located
done
export DOTBASH="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
export DOTZSH="$( cd -P ${DOTBASH}/../zsh >/dev/null && pwd )"
export DOTFILES=${DOTZSH%/*}

# Set platform specific variables
if [ -z "${DistroBasedOn}" ] && [ -f ${DOTFILES}/scripts/identify_platform.sh ]; then
    . ${DOTFILES}/scripts/identify_platform.sh
    PLAT=${DistroBasedOn}-${MAJOR_REV}-${MACH}
else
    PLAT=unknown
fi

# Fix umask to a sane value if needed
if [[ $(umask) =~ ^[0]+$ ]]; then
    umask 022
fi

# Store the original path in DOTZSH_BASH_ORIG_PATH if not already set
if [[ -z "${DOTZSH_BASH_ORIG_PATH}" ]]; then
    export DOTZSH_BASH_ORIG_PATH=${PATH}
fi

# Set BASH_ENV
export BASH_ENV=${HOME}/.bashenv

# If modules is available, use it, else manage key paths here
if [ -f /usr/cadtools/bin/modules.dir/Shrc ]; then
    . /usr/cadtools/bin/modules.dir/Shrc
else
    # add platform specific personal bin directory to beginning of path
    if [ -d ${HOME}/${PLAT}/bin ] \
        && [[ ":$PATH:" != *":${HOME}/${PLAT}/bin:"* ]];  then
        PATH="${HOME}/${PLAT}/bin${PATH:+":$PATH"}"
    fi
fi

# If on WSL, set window title to reflect Linux flavor..
if [[ -n ${PS1} ]] && grep -qi Microsoft /proc/version 2>/dev/null; then
    echo -en "\033]0;${WSL_DISTRO_NAME%%-*}\a"
fi

# Look for a suitable zsh
ZSH=""
if [ -x ${HOME}/${PLAT}/bin/zsh ]; then
    ZSH=${HOME}/${PLAT}/bin/zsh
elif [ -x /bin/zsh ]; then
    ZSH=/bin/zsh
fi

#
# For now we just switch to ZSH on login shells
#
if [[ -n ${PS1} ]] && [[ -n "${ZSH}" ]] && [[ -z "${VSCODE}" ]] \
    && ( shopt -q login_shell \
        || [[ $(ps -o comm= $PPID) = *terminal ]] \
        || [[ $(ps -o comm= $PPID) = konsole ]] \
        || [[ $(ps -o comm= $PPID) = code ]] \
        || [[ -n "${VSCODE_IPC_HOOK_CLI}" ]] \
    ); then
    export SHELL=${ZSH}
    exec ${SHELL} -l
fi

# If we get here, we're being called by VS Code. 
# 1. Setup search path to match, or closely enough match ZSH...
if [[ -n "${ZSH}" ]]; then
    export PATH=$(${ZSH} -l -c "echo \${PATH}")
fi

export COLUMNS="120"

export PATH="$PATH:/home/jputsch/apps/acli/10.2.0/linux/7"

# Enable the subsequent settings only in interactive sessions
case $- in
  *i*) ;;
    *) return;;
esac

# Path to your oh-my-bash installation.
export OSH="$HOME/.oh-my-bash"

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-bash is loaded.
OSH_THEME="font"

# If you set OSH_THEME to "random", you can ignore themes you don't like.
# OMB_THEME_RANDOM_IGNORED=("powerbash10k" "wanelo")

# Uncomment the following line to use case-sensitive completion.
# OMB_CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# OMB_HYPHEN_SENSITIVE="false"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_OSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you don't want the repository to be considered dirty
# if there are untracked files.
# SCM_GIT_DISABLE_UNTRACKED_DIRTY="true"

# Uncomment the following line if you want to completely ignore the presence
# of untracked files in the repository.
# SCM_GIT_IGNORE_UNTRACKED="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.  One of the following values can
# be used to specify the timestamp format.
# * 'mm/dd/yyyy'     # mm/dd/yyyy + time
# * 'dd.mm.yyyy'     # dd.mm.yyyy + time
# * 'yyyy-mm-dd'     # yyyy-mm-dd + time
# * '[mm/dd/yyyy]'   # [mm/dd/yyyy] + [time] with colors
# * '[dd.mm.yyyy]'   # [dd.mm.yyyy] + [time] with colors
# * '[yyyy-mm-dd]'   # [yyyy-mm-dd] + [time] with colors
# If not set, the default value is 'yyyy-mm-dd'.
# HIST_STAMPS='yyyy-mm-dd'

# Uncomment the following line if you do not want OMB to overwrite the existing
# aliases by the default OMB aliases defined in lib/*.sh
# OMB_DEFAULT_ALIASES="check"

# Would you like to use another custom folder than $OSH/custom?
# OSH_CUSTOM=/path/to/new-custom-folder

# To disable the uses of "sudo" by oh-my-bash, please set "false" to
# this variable.  The default behavior for the empty value is "true".
OMB_USE_SUDO=true

# To enable/disable display of Python virtualenv and condaenv
# OMB_PROMPT_SHOW_PYTHON_VENV=true  # enable
# OMB_PROMPT_SHOW_PYTHON_VENV=false # disable

# Which completions would you like to load? (completions can be found in ~/.oh-my-bash/completions/*)
# Custom completions may be added to ~/.oh-my-bash/custom/completions/
# Example format: completions=(ssh git bundler gem pip pip3)
# Add wisely, as too many completions slow down shell startup.
completions=(
  git
  composer
  ssh
)

# Which aliases would you like to load? (aliases can be found in ~/.oh-my-bash/aliases/*)
# Custom aliases may be added to ~/.oh-my-bash/custom/aliases/
# Example format: aliases=(vagrant composer git-avh)
# Add wisely, as too many aliases slow down shell startup.
aliases=(
  general
)

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-bash/plugins/*)
# Custom plugins may be added to ~/.oh-my-bash/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  bashmarks
)

# Which plugins would you like to conditionally load? (plugins can be found in ~/.oh-my-bash/plugins/*)
# Custom plugins may be added to ~/.oh-my-bash/custom/plugins/
# Example format:
#  if [ "$DISPLAY" ] || [ "$SSH" ]; then
#      plugins+=(tmux-autoattach)
#  fi

source "$OSH"/oh-my-bash.sh

# User configuration
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-bash libs,
# plugins, and themes. Aliases can be placed here, though oh-my-bash
# users are encouraged to define aliases within the OSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias bashconfig="mate ~/.bashrc"
# alias ohmybash="mate ~/.oh-my-bash"
